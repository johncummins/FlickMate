{"version":3,"sources":["./src/app/services/follow.service.ts","./src/app/services/read-movie.service.ts","./src/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAA2C;AACgB;AACvB;AAES;IAOhC,aAAa,SAAb,aAAa;IAExB,YAAoB,GAAqB,EAAU,IAAiB;QAAhD,QAAG,GAAH,GAAG,CAAkB;QAAU,SAAI,GAAJ,IAAI,CAAa;IAGpE,CAAC;IAED,QAAQ;QACN,mCAAmC;QACnC,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrC,mEAAmE;IACrE,CAAC;IAED,YAAY,CAAC,MAAc;QACzB,mCAAmC;QACnC,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,YAAY,CAAC,MAAc;QACzB,oCAAoC;QACpC,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,WAAW,CAAC,aAAa;QACvB,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE;aAClD,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;YACpB,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC1B,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBACzD,IAAI,GAAG,CAAC,EAAE,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;wBAClC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;qBACjD;iBACF;YACH,CAAC,CAAC;YACF,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEJ,kBAAkB;QAClB,kEAAkE;QAClE,uBAAuB;QACvB,WAAW;QACX,uBAAuB;QACvB,kCAAkC;QAClC,qDAAqD;QACrD,uCAAuC;QACvC,kCAAkC;QAClC,YAAY;QACZ,SAAS;QACT,OAAO;IAET,CAAC;IAGD,WAAW,CAAC,UAAkB;QAC5B,8CAA8C;QAC9C,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,UAAU,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,UAAkB,EAAE,UAAkB;QAC3C,4EAA4E;QAC5E,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,UAAU,EAAE,CAAC,CAAC;QAC5D,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,UAAU,EAAE,CAAC,CAAC;QAE7D,WAAW,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE;aAC1B,IAAI,CAAC,WAAW,CAAC,EAAE;YAClB,IAAI,WAAW,CAAC,MAAM,IAAI,UAAU,IAAI,SAAS;gBAC/C,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC;iBAC/E,IAAI,WAAW,CAAC,MAAM;gBACzB,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC;;gBAE1C,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEL,YAAY,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE;aAC3B,IAAI,CAAC,WAAW,CAAC,EAAE;YAClB,IAAI,WAAW,CAAC,MAAM,IAAI,UAAU,IAAI,SAAS;gBAC/C,OAAO,CAAC,GAAG,CAAC,sEAAsE,CAAC;iBAChF,IAAI,WAAW,CAAC,MAAM;gBACzB,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC;;gBAE3C,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,UAAkB,EAAE,UAAkB;QAC7C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,6EAAoC,EAAE,EAAE,CAAC;QACxG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,6EAAoC,EAAE,EAAE,CAAC;QACxG,6EAA6E;QAC7E,6EAA6E;IAC/E,CAAC;CACF;;YApGQ,qEAAgB;YAGhB,sDAAW;;AAOP,aAAa;IAHzB,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,aAAa,CA0FzB;AA1FyB;;;;;;;;;;;;;;;;;;;;;ACXiB;AACO;AACL;IAMhC,gBAAgB,SAAhB,gBAAgB;IAO3B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QANpC,oEAAoE;QACpE,eAAU,GAAG,4DAAmB,CAAC;QACjC,8EAA8E;QAC9E,YAAO,GAAG,qCAAqC,CAAC;QAChD,WAAM,GAAG,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC;IAEpB,CAAC;IAExC,UAAU;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAC7D,CAAC;IACJ,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAC/D,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,0DAA0D;YACxD,IAAI,CAAC,UAAU;YACf,YAAY,CACf,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,OAAO;QAChB,+CAA+C;QAC/C,kBAAkB;QAClB,0EAA0E;QAC1E,eAAe;QACf,6EAA6E;QAC7E,KAAK;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO;YACV,OAAO;YACP,IAAI,CAAC,MAAM;YACX,0CAA0C,CAC7C,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,OAAO;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1E,CAAC;IAED,iBAAiB,CAAC,OAAO;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,2BAA2B,GAAG,IAAI,CAAC,UAAU,CACvE,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,OAAO;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IACzE,CAAC;CACF;;YAhEQ,4DAAU;;AAON,gBAAgB;IAH5B,yDAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,gBAAgB,CAyD5B;AAzD4B;;;;;;;;;;;;;;;;ACRtB,MAAM,MAAM,GAAG;IAClB,YAAY,EAAE,kCAAkC;IAChD,eAAe,EAAE,yCAAyC;IAC1D,YAAY,EAAE,UAAU;CAC3B","file":"src_app_services_follow_service_ts-src_app_services_read-movie_service_ts.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport firebase from 'firebase/app';\nimport { map, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FollowService {\n\n  constructor(private afs: AngularFirestore, private auth: AuthService,\n\n  ) {\n  }\n\n  getUsers() {\n    // Used to build the follower count\n    return this.afs.collection(`users/`);\n    // return this.afStore.collection(`users/`).doc(`${userToSearch}`);\n  }\n\n  getFollowers(userId: string) {\n    // Used to build the follower count\n    return this.afs.collection(`followers/`).doc(`${userId}`);\n  }\n\n  getFollowing(userId: string) {\n    // Used to build the following count\n    return this.afs.collection(`following/`).doc(`${userId}`);\n  }\n\n  getUserList(inUserListArr) {\n    return this.afs.collection('users').get().toPromise()\n      .then((collections) => {\n        let userList = [];\n        collections.forEach((doc) => {\n          for (let index = 0; index < inUserListArr.length; index++) {\n            if (doc.id == inUserListArr[index]) {\n              userList.push({ id: doc.id, data: doc.data() });\n            }\n          }\n        })\n        return userList;\n      })\n\n    // return this.afs\n    //   .collection('users', ref => ref.where('uid', '==', tempUser))\n    //   .snapshotChanges()\n    //   .pipe(\n    //     map(actions => {\n    //       return actions.map(a => {\n    //         const data: Object = a.payload.doc.data();\n    //         const id = a.payload.doc.id;\n    //         return { id, ...data };\n    //       });\n    //     })\n    //   );\n\n  }\n\n\n  isFollowing(followerId: string) {\n    // Used to see if UserFoo if following UserBar\n    return this.afs.collection(`following/`).doc(`${followerId}`);\n  }\n\n  follow(followerId: string, followedId: string) {\n    // if the follower id does not exist here then use set, otherwise use update\n    const followerRef = this.afs.doc(`followers/${followedId}`);\n    const followingRef = this.afs.doc(`following/${followerId}`);\n\n    followerRef.get().toPromise()\n      .then(docSnapshot => {\n        if (docSnapshot.exists && followerId == undefined)\n          console.log(\"Error: cannot add follower, The user is not defined (not logged in)\")\n        else if (docSnapshot.exists)\n          followerRef.update({ [followerId]: true })\n        else\n          followerRef.set({ [followerId]: true })\n      });\n\n    followingRef.get().toPromise()\n      .then(docSnapshot => {\n        if (docSnapshot.exists && followerId == undefined)\n          console.log(\"Error: cannot add following, The user is not defined (not logged in)\")\n        else if (docSnapshot.exists)\n          followingRef.update({ [followedId]: true })\n        else\n          followingRef.set({ [followedId]: true })\n      });\n  }\n\n  unfollow(followerId: string, followedId: string) {\n    this.afs.doc(`followers/${followedId}`).update({ [followerId]: firebase.firestore.FieldValue.delete() })\n    this.afs.doc(`following/${followerId}`).update({ [followedId]: firebase.firestore.FieldValue.delete() })\n    // this.afStore.doc(`following/${followedId}`).update({ [followerId]: null })\n    // this.afStore.doc(`following/${followerId}`).update({ [followedId]: null })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { config } from '../../../src/config';\nimport { stringify } from 'querystring';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReadMovieService {\n  // getting the api key from the config varibale in the confg.js file\n  tmdbApiKey = config.TMDb_API_KEY;\n  // https://api.themoviedb.org/3/movie/770?api_key=[tmdb-apikey]&language=en-US\n  baseUrl = 'https://api.themoviedb.org/3/movie/';\n  endUrl = '?api_key=' + this.tmdbApiKey + '&language=en-US';\n\n  constructor(private http: HttpClient) {}\n\n  getPopular() {\n    return this.http.get(\n      this.baseUrl + 'popular' + this.endUrl + '&page=1&region=IE'\n    );\n  }\n\n  getTopRated() {\n    return this.http.get(\n      this.baseUrl + 'top_rated' + this.endUrl + '&page=1&region=IE'\n    );\n  }\n\n  getTrendingToday() {\n    return this.http.get(\n      'https://api.themoviedb.org/3/trending/movie/day?api_key=' +\n        this.tmdbApiKey +\n        '&region=IE'\n    );\n  }\n\n  getDetails(movieid) {\n    // let movieidString = JSON.stringify(movieid);\n    // JSON.stringify;\n    // console.log('This is the movie ID in the searvice fucntion' + movieid);\n    // console.log(\n    //   'This is the movie ID in the searvice fucntion (string)' + movieidString\n    // );\n    return this.http.get(\n      this.baseUrl +\n        movieid +\n        this.endUrl +\n        '&append_to_response=images,release_dates'\n    );\n  }\n\n  getCredits(movieid) {\n    return this.http.get(this.baseUrl + movieid + '/credits' + this.endUrl);\n  }\n\n  getWatchProviders(movieid) {\n    return this.http.get(\n      this.baseUrl + movieid + '/watch/providers?api_key=' + this.tmdbApiKey\n    );\n  }\n\n  getVideos(movieid) {\n    return this.http.get(this.baseUrl + movieid + '/videos' + this.endUrl);\n  }\n}\n","export const config = {\n    TMDb_API_KEY: 'a69ae288e13db0638a2dac2c0c1ddcee',\n    youTube_API_KEY: 'AIzaSyAtp9ZssZucZSfN6EfYWLiGDbp3ZTK8cc8',\n    OMDb_API_KEY: '9a2e7f49'\n}"],"sourceRoot":"webpack:///"}